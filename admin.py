import random

from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from aiogram import Router, F, types
from aiogram.utils.keyboard import InlineKeyboardBuilder

from credentials import cur, base
from log import logger


admin_router = Router()


class Add_trainer(StatesGroup):
    add_trainer = State()

class Check_admin(StatesGroup):
    waiting_admin_code = State()

def generate_unique_code():
    while True:
        code = "{:06d}".format(random.randint(100000, 999999))
        exists = cur.execute(
            "SELECT 1 FROM trainers WHERE id_trainer = ?",
            (code,)
        ).fetchone()
        if not exists:
            return int(code)


@admin_router.callback_query(F.data == 'admin_meny')
async def check_trainer(callback: types.CallbackQuery, state:FSMContext):
    await callback.message.edit_text('–ù–∞–¥—ñ–π—à–ª–∏ —Å–≤—ñ–π ID üëÆ')
    await state.set_state(Check_admin.waiting_admin_code)
    await callback.answer()

@admin_router.message(Check_admin.waiting_admin_code)
async def trainer_code(message: types.Message, state: FSMContext):
    logger.info(
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} (ID: {message.from_user.id}) –≤–≤–æ–¥–∏—Ç—å id_administrator")
    code_entered = message.text.strip()
    result = cur.execute(
        "SELECT 1 FROM admin_base WHERE id_admin = ? AND name = ?",
        (code_entered, 'Administrator')
    ).fetchone()
    builder = InlineKeyboardBuilder()
    if result:
        name = result[0]
        await message.answer(f"‚úÖ –ö–æ–¥ –≤—ñ—Ä–Ω–∏–π. –í—ñ—Ç–∞—é, A–¥–º—ñ–Ω–µ!")
        logger.info(
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} (ID: {message.from_user.id}) –∑–∞–π—à–æ–≤ –¥–æ –∞–¥–º—ñ–Ω –º–µ–Ω—é –º–µ–Ω—é")
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text='–î–æ–¥–∞—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ üßò', callback_data='add_trainer'))
        builder.add(types.InlineKeyboardButton(text='–í–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ üß®', callback_data='remove_trainer'))
        builder.add(types.InlineKeyboardButton(text='–ù–∞ –≥–æ–ª–æ–≤–Ω—É üè†', callback_data='Home'))
        builder.adjust(1)
        await message.answer('–¶–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω–∞.', reply_markup=builder.as_markup())
        await state.clear()  # –∑–∞–≤–µ—Ä—à—É—î–º–æ FSM

    else:
        logger.warning(
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} (ID: {message.from_user.id}) –≤–≤—ñ–≤ –ù–ï –ü–†–ê–í–ò–õ–¨–ù–ò–ô id_admina")
        builder.add(types.InlineKeyboardButton(text='–ù–∞ –≥–æ–ª–æ–≤–Ω—É üè†', callback_data='Home'))
        await message.answer("‚ùå –ö–æ–¥ –Ω–µ–≤—ñ—Ä–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:", reply_markup=builder.as_markup())


# —Ö–µ–Ω–¥–ª–µ—Ä –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
@admin_router.callback_query(F.data == 'add_trainer')
async def add_coach_to_db(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.first_name} (ID: {callback.from_user.id}) –≤–∏–∫–æ–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É {callback.data}")
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text='–ù–∞ –≥–æ–ª–æ–≤–Ω—É üè†', callback_data='Home'))
    await callback.answer()
    await callback.message.edit_text("–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —ñ–º º—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ —ñ —è —Ç–µ–±–µ –∑–∞–ø–∏—à—É –¥–æ –±–∞–∑–∏.", reply_markup=builder.as_markup())
    await state.set_state(Add_trainer.add_trainer)


@admin_router.message(Add_trainer.add_trainer)
async def record_coach(message: types.Message, state: FSMContext):
    name_coach = message.text
    id_trainer = generate_unique_code()
    exists = cur.execute(
        "SELECT 1 FROM trainers WHERE name = ?", (name_coach,)
    ).fetchone()
    builder = InlineKeyboardBuilder()
    if exists:
        builder.add(types.InlineKeyboardButton(text='–ù–∞ –≥–æ–ª–æ–≤–Ω—É üè†', callback_data='Home'))
        await message.answer("‚ùå –¢–∞–∫–µ —ñ–º º—è –≤–∂–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:", reply_markup=builder.as_markup())
    else:
        base.execute('INSERT INTO trainers (name, id_trainer) VALUES(?, ?)',
                     (name_coach, id_trainer,))
        base.commit()
        await state.clear()  # –∑–∞–≤–µ—Ä—à—É—î–º–æ FSM
        builder.add(types.InlineKeyboardButton(text='–ù–∞ –≥–æ–ª–æ–≤–Ω—É üè†', callback_data='Home'))
        logger.info(
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} (ID: {message.from_user.id}) –¥–æ–¥–∞–≤ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ {name_coach}")
        await message.answer(text=f'‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—å.\n\n–û—Å—å –í–∞—Å –∫–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è '
                                  + str(id_trainer) + '\n\n‚ùó‚ùó‚ùó–¢—Ä–µ–±–∞ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≥–æ–¥–∏–Ω–∏ –≤ —è–∫—ñ —Ç—Ä–µ–Ω–µ—Ä –±—É–¥–µ –≤–µ—Å—Ç–∏ –ø—Ä–∏–π–æ–º.', reply_markup=builder.as_markup())

@admin_router.callback_query(F.data == 'remove_trainer')
async def list_trainers_all(callback: types.CallbackQuery):
    select_names = cur.execute('SELECT name, id_trainer FROM trainers').fetchall()
    builder = InlineKeyboardBuilder()
    for i in select_names:
        builder.add(types.InlineKeyboardButton(text=i[0], callback_data=f'kill_{i[1]}'))
    builder.add(types.InlineKeyboardButton(text='–ù–∞ –≥–æ–ª–æ–≤–Ω—É üè†', callback_data='Home'))
    builder.adjust(1)
    await callback.message.edit_text('–í–∏–±–µ—Ä—ñ—Ç—å —Å–µ–±–µ –∑—ñ —Å–ø–∏—Å–∫—É ‚¨á', reply_markup=builder.as_markup())
    await callback.answer()


@admin_router.callback_query(F.data.startswith('kill_'))
async def remove_coach(callback: types.CallbackQuery):
    id_trainer = callback.data.split('_')[1]
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text='–ù–∞ –≥–æ–ª–æ–≤–Ω—É üè†', callback_data='Home'))
    try:
        base.execute('DELETE FROM trainers WHERE id_trainer = ?', (id_trainer,))
        base.commit()
        logger.info(
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.first_name} (ID: {callback.from_user.id}) –≤–∏–¥–∞–ª–∏–≤ —Ç—Ä–µ–Ω–µ—Ä–∞")

        try:
            await callback.message.edit_text('‚úÖ –¢—Ä–µ–Ω–µ—Ä–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.', reply_markup=builder.as_markup())
        except TelegramBadRequest:
            await callback.message.answer('‚úÖ –¢—Ä–µ–Ω–µ—Ä–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.')

    except Exception as e:
        await callback.message.answer(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: {e}', reply_markup=builder.as_markup())
    finally:
        await callback.answer()





